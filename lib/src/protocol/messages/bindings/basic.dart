// The file contains all method messages for AMQP class Basic (id: 60)
//
// File was auto-generated by generate_bindings.dart at 2019-03-21 11:46:08.137286
//
// Do not modify

// ignore_for_file: empty_constructor_bodies

part of dart_amqp.protocol;

class BasicQos implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 10;

  // Message arguments
  int prefetchSize = 0;
  int prefetchCount = 0;
  bool global = false;

  BasicQos();

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeUInt32(prefetchSize)
      ..writeUInt16(prefetchCount)
      ..writeBits([global]);
  }
}

class BasicQosOk implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 11;

  // Message arguments

  BasicQosOk.fromStream(TypeDecoder decoder) {}

  @override
  void serialize(TypeEncoder encoder) {}
}

class BasicConsume implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 20;

  // Message arguments
  int reserved_1 = 0;
  String? queue;
  String? consumerTag;
  bool noLocal = false;
  bool noAck = false;
  bool exclusive = false;
  bool noWait = false;
  Map<String, Object>? arguments;

  BasicConsume();

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeUInt16(reserved_1)
      ..writeShortString(queue)
      ..writeShortString(consumerTag)
      ..writeBits([noLocal, noAck, exclusive, noWait])
      ..writeFieldTable(arguments);
  }
}

class BasicConsumeOk implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 21;

  // Message arguments
  String? consumerTag;

  BasicConsumeOk.fromStream(TypeDecoder decoder) {
    consumerTag = decoder.readShortString();
  }

  @override
  void serialize(TypeEncoder encoder) {}
}

class BasicCancel implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 30;

  // Message arguments
  String? consumerTag;
  bool noWait = false;

  BasicCancel();

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeShortString(consumerTag)
      ..writeBits([noWait]);
  }
}

class BasicCancelOk implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 31;

  // Message arguments
  String? consumerTag;

  BasicCancelOk.fromStream(TypeDecoder decoder) {
    consumerTag = decoder.readShortString();
  }

  @override
  void serialize(TypeEncoder encoder) {}
}

class BasicPublish implements Message {
  @override
  final bool msgHasContent = true;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 40;

  // Message arguments
  int reserved_1 = 0;
  String? exchange;
  String? routingKey;
  bool mandatory = false;
  bool immediate = false;

  BasicPublish();

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeUInt16(reserved_1)
      ..writeShortString(exchange)
      ..writeShortString(routingKey)
      ..writeBits([mandatory, immediate]);
  }
}

class BasicReturn implements Message {
  @override
  final bool msgHasContent = true;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 50;

  // Message arguments
  int replyCode = 0;
  String replyText = "";
  String exchange = "";
  String routingKey = "";

  BasicReturn.fromStream(TypeDecoder decoder) {
    replyCode = decoder.readUInt16();
    replyText = decoder.readShortString();
    exchange = decoder.readShortString();
    routingKey = decoder.readShortString();
  }

  @override
  void serialize(TypeEncoder encoder) {}
}

class BasicDeliver implements Message {
  @override
  final bool msgHasContent = true;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 60;

  // Message arguments
  String? consumerTag;
  int deliveryTag = 0;
  bool redelivered = false;
  String exchange = "";
  String routingKey = "";

  BasicDeliver.fromStream(TypeDecoder decoder) {
    consumerTag = decoder.readShortString();
    deliveryTag = decoder.readUInt64();
    int bitmask;
    bitmask = decoder.readUInt8();
    redelivered = bitmask & 0x1 != 0;
    exchange = decoder.readShortString();
    routingKey = decoder.readShortString();
  }

  @override
  void serialize(TypeEncoder encoder) {}
}

class BasicAck implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 80;

  // Message arguments
  int deliveryTag = 0;
  bool multiple = false;

  BasicAck();

  BasicAck.fromStream(TypeDecoder decoder) {
    deliveryTag = decoder.readUInt64();
    int bitmask;
    bitmask = decoder.readUInt8();
    multiple = bitmask & 0x1 != 0;
  }

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeUInt64(deliveryTag)
      ..writeBits([multiple]);
  }
}

class BasicNack implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 120;

  // Message arguments
  int deliveryTag = 0;
  bool multiple = false;

  BasicNack();

  BasicNack.fromStream(TypeDecoder decoder) {
    deliveryTag = decoder.readUInt64();
    int bitmask;
    bitmask = decoder.readUInt8();
    multiple = bitmask & 0x1 != 0;
  }

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeUInt64(deliveryTag)
      ..writeBits([multiple]);
  }
}

class BasicReject implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 90;

  // Message arguments
  int deliveryTag = 0;
  bool requeue = false;

  BasicReject();

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeUInt64(deliveryTag)
      ..writeBits([requeue]);
  }
}

class BasicRecover implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 110;

  // Message arguments
  bool requeue = true;

  BasicRecover();

  @override
  void serialize(TypeEncoder encoder) {
    encoder
      ..writeUInt16(msgClassId)
      ..writeUInt16(msgMethodId)
      ..writeBits([requeue]);
  }
}

class BasicRecoverOk implements Message {
  @override
  final bool msgHasContent = false;
  @override
  final int msgClassId = 60;
  @override
  final int msgMethodId = 111;

  // Message arguments

  BasicRecoverOk.fromStream(TypeDecoder decoder) {}

  @override
  void serialize(TypeEncoder encoder) {}
}
